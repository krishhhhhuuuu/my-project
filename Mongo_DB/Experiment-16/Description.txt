Experiment – 16: Student Management System using MongoDB and MVC Architecture

## Title:

Student Management System using MongoDB and MVC Architecture


## Objective:

To design and implement a **Node.js** application using the **Model-View-Controller (MVC)** architecture for managing student records stored in **MongoDB**. The goal is to understand backend structure, CRUD operations, and database connectivity using **Mongoose**.


## Theory:

MVC (Model-View-Controller) is an architectural pattern that separates an application into three main components:

* Model: Represents the data and business logic of the application.
* View: The user interface (not implemented in this backend experiment).
* Controller: Handles user requests, processes input, and interacts with the model.

In this experiment, **Express.js** acts as the web framework to manage routing and HTTP requests, while **MongoDB** serves as the database. **Mongoose** is used as the Object Data Modeling (ODM) library to simplify interactions with MongoDB.


## Software Requirements:

* Node.js
* MongoDB
* Visual Studio Code
* Postman / Thunder Client (for testing APIs)


## Technologies Used:

* Backend: Node.js, Express.js
* Database: MongoDB
* ODM: Mongoose
* Testing Tool: Postman


## Folder Structure:


Experiment-16/
│
├── controllers/
│   └── studentController.js        # Contains CRUD operation logic
│
├── models/
│   └── studentModel.js             # Defines MongoDB schema using Mongoose
│
├── routes/
│   └── studentRoutes.js            # API route definitions
│
├── server.js                       # Main server entry file
├── package.json                    # Project configuration and dependencies
└── node_modules/                   # Installed npm packages



## Program Description:

This project is a **Student Management System** built using **Node.js** and **Express.js**, where student data (name, age, course) is stored and managed in **MongoDB**. The application follows the **MVC architecture** to maintain clean separation between data, logic, and routing.

CRUD operations are implemented as RESTful APIs:

| Operation | HTTP Method | Endpoint        | Description                        |
| --------- | ----------- | --------------- | ---------------------------------- |
| Create    | POST        | `/students`     | Add a new student                  |
| Read All  | GET         | `/students`     | Retrieve all students              |
| Read One  | GET         | `/students/:id` | Get a specific student by ID       |
| Update    | PUT         | `/students/:id` | Update a student’s details         |
| Delete    | DELETE      | `/students/:id` | Delete a student from the database |



## Sample Output Screenshots (Expected):

* POST /students → Creates a new student record.
* GET /students → Displays all student data.
* GET /students/:id → Fetches a single record.
* PUT /students/:id → Updates student details.
* DELETE /students/:id → Deletes the student.


## Learning Outcomes:

After performing this experiment, students will be able to:

1. Understand and implement MVC architecture in backend development.
2. Perform **CRUD operations** using **Node.js**, **Express.js**, and **MongoDB**.
3. Use **Mongoose** for schema design and database communication.
4. Structure backend projects into models, controllers, and routes.
5. Test RESTful APIs effectively using **Postman**.


## Result / Conclusion:

The experiment was successfully implemented. A Student Management System backend was developed using Node.js and MongoDB, following the MVC structure. All CRUD operations (Create, Read, Update, Delete) were tested successfully using Postman, demonstrating proper API routing, database connectivity, and structured code organization.
